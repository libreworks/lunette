<?php
/**
 * Lunette Platform
 * 
 * Lunette is free software: you can redistribute it and/or modify it under the
 * terms of the GNU General Public License as published by the Free Software
 * Foundation, either version 3 of the License, or (at your option) any later
 * version.
 *
 * Lunette is distributed in the hope that it will be useful, but WITHOUT ANY
 * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR
 * A PARTICULAR PURPOSE. See the GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with Lunette. If not, see <http://www.gnu.org/licenses/>.
 * 
 * @copyright Copyright (c) SI Tec Consulting, LLC (http://www.sitec-consulting.net)
 * @license http://opensource.org/licenses/gpl-3.0.html GNU Public License
 * @category Lunette
 * @package Lunette_Cache
 * @subpackage Tests
 * @version $Id$
 */
// Call Lunette_Cache_ServiceTest::main() if this source file is executed directly.
if (!defined('PHPUnit_MAIN_METHOD')) {
    define('PHPUnit_MAIN_METHOD', 'Lunette_Cache_ServiceTest::main');
}
require_once dirname(dirname(dirname(dirname(__FILE__)))) . DIRECTORY_SEPARATOR . 'TestHelper.php';
require_once 'Lunette/Cache/Service.php';
require_once 'Xyster/Orm.php';

/**
 * Test class for Lunette_Cache_Service.
 * Generated by PHPUnit on 2008-05-29 at 13:24:42.
 */
class Lunette_Cache_ServiceTest extends PHPUnit_Framework_TestCase
{
    /**
     * @var    Lunette_Cache_Service
     */
    protected $object;

    /**
     * Runs the test methods of this class.
     */
    public static function main()
    {
        require_once 'PHPUnit/TextUI/TestRunner.php';
        $suite  = new PHPUnit_Framework_TestSuite('Lunette_Cache_ServiceTest');
        $result = PHPUnit_TextUI_TestRunner::run($suite);
    }

    /**
     * Sets up the fixture
     */
    protected function setUp()
    {
        $orm = $this->sharedFixture instanceof Xyster_Orm ?
            $this->sharedFixture : Xyster_Orm::getInstance();
        $this->object = new Lunette_Cache_Service($orm);
    }

    /**
     * Tears down the fixture
     */
    protected function tearDown()
    {
        $db = new Lunette_TestDbSetup;
        $db->getDbAdapter()->query('DELETE FROM lunette_cache');
        Xyster_Orm::getInstance()->clear();
        $this->sharedFixture = Xyster_Orm::getInstance();
    }
    
    /**
     * Tests the 'create' method
     */
    public function testCreate()
    {
        $origOptions = array('foo'=>'bar', 'abc'=>123, 'lifetime'=>7200);
        $cache = $this->object->create('foo', 'Zend_Cache_Backend_File', $origOptions);
        $this->assertType('LunetteCache', $cache);
        $this->assertEquals('foo', $cache->name);
        $this->assertEquals('Zend_Cache_Backend_File', $cache->type);
        $this->assertEquals(7200, $cache->lifetime);
        $options = array('lifetime'=>7200);
        foreach( $cache->options as $cacheOption ) {
            $options[$cacheOption->name] = unserialize($cacheOption->value);
        }
        $this->assertEquals($origOptions, $options);
        $entity = Xyster_Orm::getInstance()->get('LunetteCache', $cache->lunetteCacheId);
        $this->assertSame($cache, $entity);
        // pre-existing cache names should error
        $this->setExpectedException('Xyster_Orm_Exception');
        $this->object->create('foo', 'Zend_Cache_Backend_File');
    }

    /**
     * Tests the 'delete' method
     */
    public function testDelete()
    {
        $cache = $this->object->create('foo', 'Zend_Cache_Backend_File');
        $this->object->delete($cache);
        $cache = null;
        $this->assertNull($this->object->getByName('foo'));
    }

    /**
     * Tests the 'getByName' method
     */
    public function testGetByName()
    {
        $this->object->create('foo', 'Zend_Cache_Backend_File');
        $cache = $this->object->getByName('foo');
        $this->assertType('LunetteCache', $cache);
        $this->assertNull($this->object->getByName('not-defined'));
    }

    /**
     * Tests the 'getSystemByName' method
     */
    public function testGetSystemByName()
    {
        $this->object->create('foo', 'Zend_Cache_Backend_File');
        $cache = $this->object->getSystemByName('foo');
        $this->assertType('Zend_Cache_Core', $cache);
    }

    /**
     * Tests the 'isCacheSystem' method
     */
    public function testIsCacheSystem()
    {
        $this->assertFalse($this->object->isCacheSystem('foo'));
        $this->object->create('foo', 'Zend_Cache_Backend_File');
        $this->assertTrue($this->object->isCacheSystem('foo'));
    }
}

// Call Lunette_Cache_ServiceTest::main() if this source file is executed directly.
if (PHPUnit_MAIN_METHOD == 'Lunette_Cache_ServiceTest::main') {
    Lunette_Cache_ServiceTest::main();
}
