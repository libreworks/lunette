<?php
/**
 * Lunette Platform
 * 
 * Lunette is free software: you can redistribute it and/or modify it under the
 * terms of the GNU General Public License as published by the Free Software
 * Foundation, either version 3 of the License, or (at your option) any later
 * version.
 *
 * Lunette is distributed in the hope that it will be useful, but WITHOUT ANY
 * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR
 * A PARTICULAR PURPOSE. See the GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with Lunette. If not, see <http://www.gnu.org/licenses/>.
 * 
 * @copyright Copyright (c) LibreWorks (http://libreworks.com)
 * @license http://opensource.org/licenses/gpl-3.0.html GNU Public License
 * @category Lunette
 * @package Lunette_Config
 * @subpackage Tests
 * @version $Id$
 */
// Call Lunette_Config_ServiceTest::main() if this source file is executed directly.
if (!defined('PHPUnit_MAIN_METHOD')) {
    define('PHPUnit_MAIN_METHOD', 'Lunette_Config_ServiceTest::main');
}
require_once dirname(dirname(dirname(dirname(__FILE__)))) . DIRECTORY_SEPARATOR . 'TestHelper.php';
require_once 'Lunette/Config/Service.php';
require_once 'Xyster/Orm.php';

/**
 * Test class for Lunette_Config_Service.
 * Generated by PHPUnit on 2008-05-29 at 09:30:34.
 */
class Lunette_Config_ServiceTest extends PHPUnit_Framework_TestCase
{
    /**
     * @var    Lunette_Config_Service
     */
    protected $object;

    /**
     * Runs the test methods of this class.
     */
    public static function main()
    {
        require_once 'PHPUnit/TextUI/TestRunner.php';
        $suite  = new PHPUnit_Framework_TestSuite('Lunette_Config_ServiceTest');
        $result = PHPUnit_TextUI_TestRunner::run($suite);
    }

    /**
     * Sets up the fixture
     */
    protected function setUp()
    {
        $orm = $this->sharedFixture instanceof Xyster_Orm ?
            $this->sharedFixture : Xyster_Orm::getInstance();
        $this->object = new Lunette_Config_Service($orm);
    }
    
    /**
     * Tests the 'getExtensionConfig' and 'setExtensionConfig' methods
     */
    public function testGetAndSetExtensionConfig()
    {
        $extension = 'test';
        $setting = 'foo';
        $value = 'bar';
        $this->assertNull($this->object->getExtensionConfig($extension, $setting));
        $this->object->setExtensionConfig($extension, $setting, $value);
        $this->assertEquals($value, $this->object->getExtensionConfig($extension, $setting));
    }

    /**
     * Tests the 'getLunetteConfig' and 'setLunetteConfig' methods
     */
    public function testGetAndSetLunetteConfig()
    {
        $setting = 'foo';
        $value = 'bar';
        $this->assertNull($this->object->getLunetteConfig($setting));
        $this->object->setLunetteConfig($setting, $value);
        $this->assertEquals($value, $this->object->getLunetteConfig($setting));
    }
    
    /**
     * Tests the 'getExtensionConfigAll' method
     */
    public function testGetExtensionConfigAll()
    {
        $extension = 'test';
        $settings = array(
                'foo' => 'bar',
                'biz' => 'buzz',
                'abc' => '123'               
            );
        $this->object->setExtensionConfigArray($extension, $settings);
        $config = $this->object->getExtensionConfigAll($extension);
        $this->assertType('Zend_Config', $config);
        foreach( $settings as $name => $value ) {
            $this->assertEquals($value, $config->$name);
        }
    }

    /**
     * Tests the 'getLunetteConfigAll' method
     */
    public function testGetLunetteConfigAll()
    {
        $settings = array(
                'foo' => 'bar',
                'biz' => 'buzz',
                'abc' => '123'               
            );
        $this->object->setLunetteConfigArray($settings);
        $config = $this->object->getLunetteConfigAll();
        $this->assertType('Zend_Config', $config);
        foreach( $settings as $name => $value ) {
            $this->assertEquals($value, $config->$name);
        }
    }
    
    /**
     * Tests the 'setExtensionConfigArray' method
     */
    public function testSetExtensionConfigArray()
    {
        $extension = 'test';
        $settings = array(
                'foo' => 'bar',
                'biz' => 'buzz',
                'abc' => '123'               
            );
        $this->object->setExtensionConfigArray($extension, $settings);
        foreach( $settings as $name => $value ) {
            $this->assertEquals( $value, $this->object->getExtensionConfig($extension, $name));
        }
    }
    
    /**
     * Tests the 'setLunetteConfigArray' method
     */
    public function testSetLunetteConfigArray()
    {
        $settings = array(
                'foo' => 'bar',
                'biz' => 'buzz',
                'abc' => '123'               
            );
        $this->object->setLunetteConfigArray($settings);
        foreach( $settings as $name => $value ) {
            $this->assertEquals( $value, $this->object->getLunetteConfig($name));
        }
    }
}

// Call Lunette_Config_ServiceTest::main() if this source file is executed directly.
if (PHPUnit_MAIN_METHOD == 'Lunette_Config_ServiceTest::main') {
    Lunette_Config_ServiceTest::main();
}
