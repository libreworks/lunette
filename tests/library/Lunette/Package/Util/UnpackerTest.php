<?php
/**
 * Lunette Platform
 * 
 * Lunette is free software: you can redistribute it and/or modify it under the
 * terms of the GNU General Public License as published by the Free Software
 * Foundation, either version 3 of the License, or (at your option) any later
 * version.
 *
 * Lunette is distributed in the hope that it will be useful, but WITHOUT ANY
 * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR
 * A PARTICULAR PURPOSE. See the GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with Lunette. If not, see <http://www.gnu.org/licenses/>.
 * 
 * @copyright Copyright (c) LibreWorks (http://libreworks.com)
 * @license http://opensource.org/licenses/gpl-3.0.html GNU Public License
 * @category Lunette
 * @package Lunette_Package
 * @subpackage Tests
 * @version $Id$
 */
// Call Lunette_Package_Util_UnpackerTest::main() if this source file is executed directly.
if (!defined('PHPUnit_MAIN_METHOD')) {
    define('PHPUnit_MAIN_METHOD', 'Lunette_Package_Util_UnpackerTest::main');
}
require_once dirname(dirname(dirname(dirname(dirname(__FILE__))))) . DIRECTORY_SEPARATOR . 'TestHelper.php';
require_once 'Lunette/Package/Util/Unpacker.php';
require_once 'Lunette/File/Sandbox.php';
require_once 'Lunette/TestDbSetup.php';
require_once 'Lunette/Application.php';
require_once 'Lunette/Package/Service.php';
require_once 'Lunette/Package/Meta.php';

/**
 * Test class for Lunette_Package_Util_Unpacker.
 * Generated by PHPUnit on 2008-06-30 at 12:26:44.
 */
class Lunette_Package_Util_UnpackerTest extends PHPUnit_Framework_TestCase
{
    /**
     * @var    Lunette_Package_Util_Unpacker
     */
    protected $object;

    protected $sandbox;
    
    protected $app;
    
    protected $service;
    
    /**
     * Runs the test methods of this class.
     */
    public static function main()
    {
        require_once 'PHPUnit/TextUI/TestRunner.php';
        $suite  = new PHPUnit_Framework_TestSuite('Lunette_Package_Util_UnpackerTest');
        $result = PHPUnit_TextUI_TestRunner::run($suite);
    }

    /**
     * Sets up the fixture
     */
    protected function setUp()
    {
        $db = new Lunette_TestDbSetup();
        $db->setupPackage();
        
        $this->sandbox = new Lunette_File_Sandbox('LunettePackageUtilUnpackerTest');
        $this->app = $this->getMock('Lunette_Application');
        $this->app->expects($this->any())
            ->method('getApplicationPath')
            ->will($this->returnValue($this->sandbox->getRealpath()));

        $this->service = new Lunette_Package_Service(Xyster_Orm::getInstance());
    }

    /**
     * Tears down the fixture
     */
    protected function tearDown()
    {
        $this->object = null;
        $this->sandbox = null;
        $db = new Lunette_TestDbSetup();
        $db->tearDownPackage();
    }

    /**
     * @todo Implement testUnpack().
     */
    public function testUnpack()
    {
        $this->_setup();
        
        $pkg = new Lunette_Package_Meta(dirname(dirname(dirname(__FILE__))) . '/File/Archive/_files/unittest-1.0-all.deb');

        $this->object = new Lunette_Package_Util_Unpacker($this->app, $this->service, $pkg);
    }

    /**
     * @todo Implement testVersionInstalled().
     */
    public function testVersionInstalled()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }

    /**
     * @todo Implement testDeconfigureConflicting().
     */
    public function testDeconfigureConflicting()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }

    /**
     * @todo Implement testPreInstall().
     */
    public function testPreInstall()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }

    /**
     * @todo Implement testDoUnpack().
     */
    public function testDoUnpack()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }

    /**
     * @todo Implement testPostUpgrade().
     */
    public function testPostUpgrade()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }

    /**
     * @todo Implement testRemoveOld().
     */
    public function testRemoveOld()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }

    /**
     * @todo Implement testFileList().
     */
    public function testFileList()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }

    /**
     * @todo Implement testScripts().
     */
    public function testScripts()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }

    /**
     * @todo Implement testDisappear().
     */
    public function testDisappear()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }

    /**
     * @todo Implement testLobotomizeFilelist().
     */
    public function testLobotomizeFilelist()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }

    /**
     * @todo Implement testRemoveBackups().
     */
    public function testRemoveBackups()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }

    /**
     * @todo Implement testUnpackedState().
     */
    public function testUnpackedState()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }

    /**
     * @todo Implement testRemoveConflicting().
     */
    public function testRemoveConflicting()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }
    
    /**
     * Sets up the pre-installed packages
     */
    protected function _setup()
    {
        $orm = Xyster_Orm::getInstance();
        
        $old = new LunettePackage;
        $old->name = 'lunette-package-example';
        $old->version = '0.8';
        $old->state = 5;
        $old->files = "\nexample/foobar.txt\nexample/test.txt\nexample/trial/explanation.txt\n";
        $orm->persist($old);

        $cfl = new LunettePackage;
        $cfl->name = 'lunette-package-conflictor';
        $cfl->version = '1.0.1';
        $cfl->state = 5;
        $cfl->files = "\nexample/foobar2.txt\nexample/test2.txt\n";
        $orm->persist($cfl);
        
        $rpl = new LunettePackage;
        $rpl->name = 'lunette-package-replacee';
        $rpl->version = '1.0.1';
        $rpl->state = 5;
        $rpl->files = "\nexample/trial/explanation2.txt\nexample/trial/explanation3.txt\nexample=trial/explanation4.txt\n";
        $orm->persist($rpl);
        
        $dsp = new LunettePackage;
        $dsp->name = 'lunette-package-disappearing';
        $dsp->version = '1.2.1';
        $dsp->state = 5;
        $dsp->files = "\nexample/foobar3.txt\nexample/test3.txt\n";
        $orm->persist($dsp);
                
        $orm->commit();
    }
}

// Call Lunette_Package_Util_UnpackerTest::main() if this source file is executed directly.
if (PHPUnit_MAIN_METHOD == 'Lunette_Package_Util_UnpackerTest::main') {
    Lunette_Package_Util_UnpackerTest::main();
}
