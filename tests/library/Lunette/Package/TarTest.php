<?php
/**
 * Lunette Platform
 * 
 * Lunette is free software: you can redistribute it and/or modify it under the
 * terms of the GNU General Public License as published by the Free Software
 * Foundation, either version 3 of the License, or (at your option) any later
 * version.
 *
 * Lunette is distributed in the hope that it will be useful, but WITHOUT ANY
 * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR
 * A PARTICULAR PURPOSE. See the GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with Lunette. If not, see <http://www.gnu.org/licenses/>.
 * 
 * @copyright Copyright (c) SI Tec Consulting, LLC (http://www.sitec-consulting.net)
 * @license http://opensource.org/licenses/gpl-3.0.html GNU Public License
 * @category Lunette
 * @package Lunette_Package
 * @subpackage Tests
 * @version $Id$
 */
// Call Lunette_Package_TarTest::main() if this source file is executed directly.
if (!defined('PHPUnit_MAIN_METHOD')) {
    define('PHPUnit_MAIN_METHOD', 'Lunette_Package_TarTest::main');
}
require_once dirname(dirname(dirname(dirname(__FILE__)))) . DIRECTORY_SEPARATOR . 'TestHelper.php';
require_once 'Lunette/Package/Tar.php';

/**
 * Test class for Lunette_Package_Tar.
 * Generated by PHPUnit on 2008-06-01 at 14:01:54.
 */
class Lunette_Package_TarTest extends PHPUnit_Framework_TestCase
{
    /**
     * @var    Lunette_Package_Tar
     */
    protected $object;
    
    /**
     * @var array
     */
    protected $expected = array(array(
        "checksum"=> 7023,
        "filename"=> "LunetteTest/",
        "mode"=> 493,
        "uid"=> 1000,
        "gid"=> 1000,
        "size"=> 0,
        "mtime"=> 1212343814,
        "typeflag"=> "5",
        "link"=> ""
        ), array(
        "checksum"=> 7344,
        "filename"=> "LunetteTest/Bar/",
        "mode"=> 493,
        "uid"=> 1000,
        "gid"=> 1000,
        "size"=> 0,
        "mtime"=> 1212343825,
        "typeflag"=> "5",
        "link"=> ""
        ), array(
        "checksum"=> 7363,
        "filename"=> "LunetteTest/Foo/",
        "mode"=> 493,
        "uid"=> 1000,
        "gid"=> 1000,
        "size"=> 0,
        "mtime"=> 1212344025,
        "typeflag"=> "5",
        "link"=> ""
        ), array(
        "checksum"=> 7662,
        "filename"=> "LunetteTest/Bar/Abc/",
        "mode"=> 493,
        "uid"=> 1000,
        "gid"=> 1000,
        "size"=> 0,
        "mtime"=> 1212344051,
        "typeflag"=> "5",
        "link"=> ""
        ), array(
        "checksum"=> 7667,
        "filename"=> "LunetteTest/Bar/Def/",
        "mode"=> 493,
        "uid"=> 1000,
        "gid"=> 1000,
        "size"=> 0,
        "mtime"=> 1212344075,
        "typeflag"=> "5",
        "link"=> ""
        ), array(
        "checksum"=> 8872,
        "filename"=> "LunetteTest/Bar/Abc/example4.txt",
        "mode"=> 420,
        "uid"=> 1000,
        "gid"=> 1000,
        "size"=> 11654,
        "mtime"=> 1212344051,
        "typeflag"=> "0",
        "link"=> ""
        ), array(
        "checksum"=> 8868,
        "filename"=> "LunetteTest/Bar/Abc/example3.txt",
        "mode"=> 420,
        "uid"=> 1000,
        "gid"=> 1000,
        "size"=> 11653,
        "mtime"=> 1212344042,
        "typeflag"=> "0",
        "link"=> ""
        ), array(
        "checksum"=> 8821,
        "filename"=> "LunetteTest/Bar/Def/example.txt",
        "mode"=> 420,
        "uid"=> 1000,
        "gid"=> 1000,
        "size"=> 11653,
        "mtime"=> 1212344065,
        "typeflag"=> "0",
        "link"=> ""
        ), array(
        "checksum"=> 8875,
        "filename"=> "LunetteTest/Bar/Def/example2.txt",
        "mode"=> 420,
        "uid"=> 1000,
        "gid"=> 1000,
        "size"=> 11654,
        "mtime"=> 1212344075,
        "typeflag"=> "0",
        "link"=> ""
        ), array(
        "checksum"=> 8573,
        "filename"=> "LunetteTest/Foo/example5.txt",
        "mode"=> 420,
        "uid"=> 1000,
        "gid"=> 1000,
        "size"=> 11653,
        "mtime"=> 1212344025,
        "typeflag"=> "0",
        "link"=> ""
        ), array(
        "checksum"=> 8577,
        "filename"=> "LunetteTest/Foo/example6.txt",
        "mode"=> 420,
        "uid"=> 1000,
        "gid"=> 1000,
        "size"=> 11654,
        "mtime"=> 1212344013,
        "typeflag"=> "0",
        "link"=> ""
        ), array(
        "checksum"=> 7921,
        "filename"=> "LunetteTest/Foo/Lorem/",
        "mode"=> 493,
        "uid"=> 1000,
        "gid"=> 1000,
        "size"=> 0,
        "mtime"=> 1212343829,
        "typeflag"=> "5",
        "link"=> ""
        ), array(
        "checksum"=> 7935,
        "filename"=> "LunetteTest/Foo/Ipsum/",
        "mode"=> 493,
        "uid"=> 1000,
        "gid"=> 1000,
        "size"=> 0,
        "mtime"=> 1212343835,
        "typeflag"=> "5",
        "link"=> ""
        ));
        
    /**
     * Runs the test methods of this class.
     */
    public static function main()
    {
        require_once 'PHPUnit/TextUI/TestRunner.php';
        $suite  = new PHPUnit_Framework_TestSuite('Lunette_Package_TarTest');
        $result = PHPUnit_TextUI_TestRunner::run($suite);
    }

    /**
     * Sets up the fixture
     */
    protected function setUp()
    {
        $this->object = new Lunette_Package_Tar(dirname(__FILE__) . '/Tar/_files/TarTest.tar');
    }

    /**
     * Tears down the fixture
     */
    protected function tearDown()
    {
        $this->object = null; // kick off destructor
        $this->_cleanup();
    }
    
    /**
     * Tests creating a reader with no archive
     */
    public function testNotFound()
    {
        $classname = get_class($this->object);
        $this->setExpectedException('Lunette_Package_Tar_Exception');
        $object = new $classname('notfound!');
    }
    
    /**
     * Tests creating a reader for a "remote" file
     */
    public function testRemote()
    {
        $object = new Lunette_Package_Tar('file://' . dirname(__FILE__) . '/Tar/_files/TarTest.tar');
        // just testing no exceptions
    }
    
    /**
     * Tests the 'extract' method
     */
    public function testExtract()
    {
        $this->_createSandbox();
        $sandbox = $this->_getSandboxName();
        $this->object->extract($sandbox);
        foreach( $this->expected as $header ) {
            $realname = $sandbox . DIRECTORY_SEPARATOR . $header['filename'];
            $this->assertFileExists($realname);
            if ( $header['typeflag'] == '5' ) {
                $this->assertTrue(is_dir($realname));
            } else {
                $this->assertEquals($header['size'], filesize($realname));
            }
        }
    }

    /**
     * Tests the 'extract' method when a file to extract exists as a dir
     */
    public function testExtractWithExistingDirNotFile()
    {
        $sandbox = $this->_getSandboxName();
        mkdir($sandbox . '/LunetteTest/Bar/Abc/example3.txt', 0777, true);
        $this->setExpectedException('Lunette_Package_Tar_Exception', 'File already exists as a directory: /tmp/TarTest/LunetteTest/Bar/Abc/example3.txt');
        $this->object->extract($sandbox);
    }

    /**
     * Tests the 'extract' method when a file to extract exists as a dir
     */
    public function testExtractWithExistingFileNotDir()
    {
        $sandbox = $this->_getSandboxName();
        mkdir($sandbox . '/LunetteTest/Bar', 0777, true);
        file_put_contents($sandbox . '/LunetteTest/Bar/Def', 'test data here');
        $this->setExpectedException('Lunette_Package_Tar_Exception', 'Directory already exists as a file: /tmp/TarTest/LunetteTest/Bar/Def');
        $this->object->extract($sandbox);
    }
    
    /**
     * Tests the 'extractFile' method
     */
    public function testExtractFile()
    {
        $contents = $this->object->extractFile('LunetteTest/Bar/Abc/example3.txt');
        $this->assertEquals(file_get_contents((dirname(__FILE__) . '/Tar/_files/example3.txt')), $contents);
    }

    /**
     * Tests the 'extractFile' method on a directory
     */
    public function testExtractFileWDirectory()
    {
        $this->setExpectedException('Lunette_Package_Tar_Exception', 'Cannot extract a directory: LunetteTest/Bar/');
        $this->object->extractFile('LunetteTest/Bar/');
    }
    
    /**
     * Tests the 'extractList' method
     */
    public function testExtractList()
    {
        $list = array('LunetteTest/Bar/Abc/example3.txt',
            'LunetteTest/Bar/Abc/example4.txt');
        $sandbox = $this->_getSandboxName();
        $this->object->extractList($list, $sandbox, 'LunetteTest');
        foreach( $list as $v ) {
            $realname = $sandbox . DIRECTORY_SEPARATOR . str_replace('LunetteTest/', '', $v);
            $this->assertFileExists($realname);
        }
        foreach( $this->expected as $v ) {
            $realname = $sandbox . DIRECTORY_SEPARATOR . $v;
            $this->assertFileNotExists($realname);
        }
    }

    /**
     * Tests the 'ls' method
     */
    public function testLs()
    {
        $actual = $this->object->ls();
        $this->assertEquals($this->expected, $actual);
    }
    
    /**
     * Creates a sandbox
     */
    protected function _createSandbox()
    {
        mkdir($this->_getSandboxName(), 0777);
    }
    
    /**
     * Cleans up the directory.
     *
     * @param string $dir
     */
    protected function _cleanup( $dir = null )
    {
        if ( $dir === null ) {
            $dir = $this->_getSandboxName();
        }
        if ( file_exists($dir) ) {
            $directory = new DirectoryIterator($dir);
            foreach( $directory as $v ) {
                if ( !$directory->isDot() ) {
                    if ( $directory->isDir() ) {
                        $this->_cleanup($directory->getRealPath());
                    } else {
                        unlink($directory->getRealPath());
                    }
                }
            }
            rmdir($dir);
        }
    }
    
    /**
     * Gets the sandbox name
     *
     * @return string
     */
    protected function _getSandboxName()
    {
        return sys_get_temp_dir() . DIRECTORY_SEPARATOR . 'TarTest';
    }
}

// Call Lunette_Package_TarTest::main() if this source file is executed directly.
if (PHPUnit_MAIN_METHOD == 'Lunette_Package_TarTest::main') {
    Lunette_Package_TarTest::main();
}
