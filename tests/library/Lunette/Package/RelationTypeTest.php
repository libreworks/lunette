<?php
/**
 * Lunette Platform
 * 
 * Lunette is free software: you can redistribute it and/or modify it under the
 * terms of the GNU General Public License as published by the Free Software
 * Foundation, either version 3 of the License, or (at your option) any later
 * version.
 *
 * Lunette is distributed in the hope that it will be useful, but WITHOUT ANY
 * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR
 * A PARTICULAR PURPOSE. See the GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with Lunette. If not, see <http://www.gnu.org/licenses/>.
 * 
 * @copyright Copyright (c) SI Tec Consulting, LLC (http://www.sitec-consulting.net)
 * @license http://opensource.org/licenses/gpl-3.0.html GNU Public License
 * @category Lunette
 * @package Lunette_Package
 * @subpackage Tests
 * @version $Id$
 */
// Call Lunette_Package_RelationTypeTest::main() if this source file is executed directly.
if (!defined('PHPUnit_MAIN_METHOD')) {
    define('PHPUnit_MAIN_METHOD', 'Lunette_Package_RelationTypeTest::main');
}
require_once dirname(dirname(dirname(dirname(__FILE__)))) . DIRECTORY_SEPARATOR . 'TestHelper.php';
require_once 'Lunette/Package/RelationType.php';

/**
 * Test class for Lunette_Package_RelationType.
 * Generated by PHPUnit on 2008-06-07 at 13:56:31.
 */
class Lunette_Package_RelationTypeTest extends PHPUnit_Framework_TestCase
{
    /**
     * Runs the test methods of this class.
     */
    public static function main()
    {
        require_once 'PHPUnit/TextUI/TestRunner.php';
        $suite  = new PHPUnit_Framework_TestSuite('Lunette_Package_RelationTypeTest');
        $result = PHPUnit_TextUI_TestRunner::run($suite);
    }
    
    /**
     * Tests the 'Depends' method
     */
    public function testDepends()
    {
       $this->_runTests(Lunette_Package_RelationType::Depends(), 'Depends', 0);
    }
    
    /**
     * Tests the 'Suggests' method
     */
    public function testSuggests()
    {
       $this->_runTests(Lunette_Package_RelationType::Suggests(), 'Suggests', 1);
    }
    
    /**
     * Tests the 'Recommends' method
     */
    public function testRecommends()
    {
        $this->_runTests(Lunette_Package_RelationType::Recommends(), 'Recommends', 2);
    }
    
    /**
     * Tests the 'Conflicts' method
     */
    public function testConflicts()
    {
       $this->_runTests(Lunette_Package_RelationType::Conflicts(), 'Conflicts', 3);
    }
    
    /**
     * Tests the 'Replaces' method
     */
    public function testReplaces()
    {
       $this->_runTests(Lunette_Package_RelationType::Replaces(), 'Replaces', 4);
    }
    
    /**
     * Tests the 'Enhances' method
     */
    public function testEnhances()
    {
       $this->_runTests(Lunette_Package_RelationType::Enhances(), 'Enhances', 5);
    }
    
    /**
     * Tests the 'Provides' method
     */
    public function testProvides()
    {
       $this->_runTests(Lunette_Package_RelationType::Provides(), 'Provides', 6);
    }
    
    /**
     * Run the common tests
     *
     * @param Lunette_Package_RelationType $actual
     * @param string $name
     * @param int $value
     */
    protected function _runTests( $actual, $name, $value )
    {
        $this->assertEquals($name, $actual->getName());
        $this->assertEquals($value, $actual->getValue());
        $this->assertEquals('Lunette_Package_RelationType ['.$value.','.$name.']', (string)$actual);
        $this->assertEquals($actual,Xyster_Enum::parse('Lunette_Package_RelationType', $name));
        $this->assertEquals($actual,Xyster_Enum::valueOf('Lunette_Package_RelationType', $value));
    }
}

// Call Lunette_Package_RelationTypeTest::main() if this source file is executed directly.
if (PHPUnit_MAIN_METHOD == 'Lunette_Package_RelationTypeTest::main') {
    Lunette_Package_RelationTypeTest::main();
}
