<?php
/**
 * Lunette Platform
 * 
 * Lunette is free software: you can redistribute it and/or modify it under the
 * terms of the GNU General Public License as published by the Free Software
 * Foundation, either version 3 of the License, or (at your option) any later
 * version.
 *
 * Lunette is distributed in the hope that it will be useful, but WITHOUT ANY
 * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR
 * A PARTICULAR PURPOSE. See the GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with Lunette. If not, see <http://www.gnu.org/licenses/>.
 * 
 * @copyright Copyright (c) LibreWorks (http://libreworks.com)
 * @license http://opensource.org/licenses/gpl-3.0.html GNU Public License
 * @category Lunette
 * @package Lunette_Package
 * @subpackage Tests
 * @version $Id$
 */
// Call Lunette_Package_Relation_SetTest::main() if this source file is executed directly.
if (!defined('PHPUnit_MAIN_METHOD')) {
    define('PHPUnit_MAIN_METHOD', 'Lunette_Package_Relation_SetTest::main');
}
require_once dirname(dirname(dirname(dirname(dirname(__FILE__))))) . DIRECTORY_SEPARATOR . 'TestHelper.php';
require_once 'Lunette/Package/Relation/Set.php';
require_once 'Lunette/Package/Relation.php';
require_once 'Lunette/Package/Relation/Type.php';
require_once 'Lunette/Package/Service.php';
require_once 'Xyster/Orm.php';

/**
 * Test class for Lunette_Package_Relation_Set.
 * Generated by PHPUnit on 2008-06-16 at 13:14:33.
 */
class Lunette_Package_Relation_SetTest extends PHPUnit_Framework_TestCase
{
    /**
     * @var    Lunette_Package_Relation_Set
     */
    protected $object;

    /**
     * Runs the test methods of this class.
     */
    public static function main()
    {
        require_once 'PHPUnit/TextUI/TestRunner.php';
        $suite  = new PHPUnit_Framework_TestSuite('Lunette_Package_Relation_SetTest');
        $result = PHPUnit_TextUI_TestRunner::run($suite);
    }

    /**
     * Sets up the fixture
     */
    protected function setUp()
    {
        $this->object = new Lunette_Package_Relation_Set;
    }

    /**
     * Tests the 'any' method
     */
    public function testAny()
    {
        $parent = $this->getMock('Lunette_Package_Interface');
        $mock = new Lunette_Package_Relation($parent, 'test-package-new', Lunette_Package_Relation_Type::Depends());
        $mock2 = new Lunette_Package_Relation($parent, 'test-package-old', Lunette_Package_Relation_Type::Depends());
        $set = Lunette_Package_Relation_Set::any($mock, $mock2);
        
        $this->assertEquals('OR', $set->getOperator());
        $svc = new Lunette_Package_SetTest_Svc(Xyster_Orm::getInstance());
        $this->assertTrue($set->isSatisfied($svc));        
    }
    
    /**
     * Tests the 'add' method
     */
    public function testAdd()
    {
        $mock = new Lunette_Package_Relation_Set;
        $this->assertTrue($this->object->add($mock));
        $this->assertTrue($this->object->contains($mock));
        $this->assertFalse($this->object->add($mock));
        $this->setExpectedException('Lunette_Package_Relation_Exception', 'This set can only contain type Lunette_Package_Relation_Interface');
        $this->object->add('aoeu1234');
    }

    /**
     * Tests the 'getOperator' method
     */
    public function testGetOperator()
    {
        $this->assertEquals('AND', $this->object->getOperator());
    }

    /**
     * Tests the 'isSatisfied' method
     */
    public function testIsSatisfied()
    {
        $parent = $this->getMock('Lunette_Package_Interface');
        $mock = new Lunette_Package_Relation($parent, 'test-package-old', Lunette_Package_Relation_Type::Depends());
        $mock2 = new Lunette_Package_Relation($parent, 'test-package-old (>= 2.2.0)', Lunette_Package_Relation_Type::Depends());
        $this->object->add($mock);
        $this->object->add($mock2);
        $svc = new Lunette_Package_SetTest_Svc(Xyster_Orm::getInstance());
        $this->assertTrue($this->object->isSatisfied($svc));
    }
    
    /**
     * Tests the 'isSatisfied' method for false
     */
    public function testNotSatisfied()
    {
        $parent = $this->getMock('Lunette_Package_Interface');
        $mock = new Lunette_Package_Relation($parent, 'test-package-new', Lunette_Package_Relation_Type::Depends());
        $mock2 = new Lunette_Package_Relation($parent, 'test-package-new (>= 3.2.0)', Lunette_Package_Relation_Type::Depends());
        $this->object->add($mock);
        $this->object->add($mock2);
        $svc = new Lunette_Package_SetTest_Svc(Xyster_Orm::getInstance());
        $this->assertFalse($this->object->isSatisfied($svc));
    }
    
    /**
     * Tests the 'parse' method
     */
    public function testParse()
    {
        $string = 'test-package, lunette-core (>> 2.2.1), base-editor | thing-editor (<= 3.0.0) | my-editor | awesome-editor';
        $parent = $this->getMock('Lunette_Package_Interface');
        $type = Lunette_Package_Relation_Type::Depends();
        
        $set = Lunette_Package_Relation_Set::parse($parent, $type, $string);
        $this->assertEquals(3, count($set));
        $array = $set->toArray();
        $this->assertType('Lunette_Package_Relation', $array[0]);
        $this->assertType('Lunette_Package_Relation', $array[1]);
        $this->assertType('Lunette_Package_Relation_Set', $array[2]);
        $this->assertEquals('OR', $array[2]->getOperator());
        $this->assertEquals(4, count($array[2]));
    }
}

class Lunette_Package_SetTest_Svc extends Lunette_Package_Service
{
    public function getInstalledVersion( $name )
    {
        if ( $name === 'test-package-old' ) {
            return '2.2.1';
        }
    }
}

// Call Lunette_Package_Relation_SetTest::main() if this source file is executed directly.
if (PHPUnit_MAIN_METHOD == 'Lunette_Package_Relation_SetTest::main') {
    Lunette_Package_Relation_SetTest::main();
}
