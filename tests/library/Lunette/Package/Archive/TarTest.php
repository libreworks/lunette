<?php
/**
 * Lunette Platform
 * 
 * Lunette is free software: you can redistribute it and/or modify it under the
 * terms of the GNU General Public License as published by the Free Software
 * Foundation, either version 3 of the License, or (at your option) any later
 * version.
 *
 * Lunette is distributed in the hope that it will be useful, but WITHOUT ANY
 * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR
 * A PARTICULAR PURPOSE. See the GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with Lunette. If not, see <http://www.gnu.org/licenses/>.
 * 
 * @copyright Copyright (c) SI Tec Consulting, LLC (http://www.sitec-consulting.net)
 * @license http://opensource.org/licenses/gpl-3.0.html GNU Public License
 * @category Lunette
 * @package Lunette_Package
 * @subpackage Tests
 * @version $Id$
 */
// Call Lunette_Package_Archive_TarTest::main() if this source file is executed directly.
if (!defined('PHPUnit_MAIN_METHOD')) {
    define('PHPUnit_MAIN_METHOD', 'Lunette_Package_Archive_TarTest::main');
}
require_once dirname(__FILE__) . DIRECTORY_SEPARATOR . 'TestCommon.php';
require_once 'Lunette/Package/Archive/Tar.php';

/**
 * Test class for Lunette_Package_Archive_Ar.
 * Generated by PHPUnit on 2008-06-02 at 19:06:30.
 */
class Lunette_Package_Archive_TarTest extends Lunette_Package_Archive_TestCommon
{
    /**
     * @var    Lunette_Package_Archive_Tar
     */
    protected $object;

    /**
     * @var array
     */
    protected $expected = array(array(
        "checksum"=> 8872,
        "filename"=> "LunetteTest/Bar/Abc/example4.txt",
        "mode"=> 420,
        "uid"=> 1000,
        "gid"=> 1000,
        "size"=> 11654,
        "mtime"=> 1212344051,
        "typeflag"=> "0",
        "link"=> ""
        ), array(
        "checksum"=> 8868,
        "filename"=> "LunetteTest/Bar/Abc/example3.txt",
        "mode"=> 420,
        "uid"=> 1000,
        "gid"=> 1000,
        "size"=> 11653,
        "mtime"=> 1212344042,
        "typeflag"=> "0",
        "link"=> ""
        ), array(
        "checksum"=> 8821,
        "filename"=> "LunetteTest/Bar/Def/example.txt",
        "mode"=> 420,
        "uid"=> 1000,
        "gid"=> 1000,
        "size"=> 11653,
        "mtime"=> 1212344065,
        "typeflag"=> "0",
        "link"=> ""
        ), array(
        "checksum"=> 8875,
        "filename"=> "LunetteTest/Bar/Def/example2.txt",
        "mode"=> 420,
        "uid"=> 1000,
        "gid"=> 1000,
        "size"=> 11654,
        "mtime"=> 1212344075,
        "typeflag"=> "0",
        "link"=> ""
        ), array(
        "checksum"=> 8573,
        "filename"=> "LunetteTest/Foo/example5.txt",
        "mode"=> 420,
        "uid"=> 1000,
        "gid"=> 1000,
        "size"=> 11653,
        "mtime"=> 1212344025,
        "typeflag"=> "0",
        "link"=> ""
        ), array(
        "checksum"=> 8577,
        "filename"=> "LunetteTest/Foo/example6.txt",
        "mode"=> 420,
        "uid"=> 1000,
        "gid"=> 1000,
        "size"=> 11654,
        "mtime"=> 1212344013,
        "typeflag"=> "0",
        "link"=> ""
        ));
        
    /**
     * Runs the test methods of this class.
     */
    public static function main()
    {
        require_once 'PHPUnit/TextUI/TestRunner.php';
        $suite  = new PHPUnit_Framework_TestSuite('Lunette_Package_Archive_TarTest');
        $result = PHPUnit_TextUI_TestRunner::run($suite);
    }

    /**
     * Sets up the fixture
     */
    protected function setUp()
    {
        $this->object = new Lunette_Package_Archive_Tar(dirname(__FILE__) . '/_files/TarTest.tar');
    }

    /**
     * Tears down the fixture
     */
    protected function tearDown()
    {
        $this->object = null;
        $this->_cleanup();
    }

    /**
     * Tests the 'extract' method
     */
    public function testExtract()
    {
        $this->_createSandbox();
        $sandbox = $this->_getSandboxName();
        $this->object->extract($sandbox);
        foreach( $this->expected as $header ) {
            $realname = $sandbox . DIRECTORY_SEPARATOR . $header['filename'];
            $this->assertFileExists($realname);
            $this->assertEquals($header['size'], filesize($realname));
        }
    }

    /**
     * Tests the 'extractFile' method
     */
    public function testExtractFile()
    {
        $contents = $this->object->extractFile('LunetteTest/Bar/Abc/example3.txt');
        $this->assertEquals(file_get_contents(dirname(dirname(__FILE__)) . '/Reader/_files/example3.txt'), $contents);
    }
    
    /**
     * Tests the 'extractFile' method with a file not found
     */
    public function testExtractFileNotThere()
    {
        $this->setExpectedException('Lunette_Package_Archive_Exception', 'File not in archive: foo');
        $this->object->extractFile('foo');
    }
    
    /**
     * Tests the 'extractList' method
     */
    public function testExtractList()
    {
        $list = array('LunetteTest/Bar/Abc/example3.txt',
            'LunetteTest/Bar/Abc/example4.txt');
        $sandbox = $this->_getSandboxName();
        $writer = new Lunette_Package_Writer($sandbox);
        $this->object->extractList($list, $writer);
        foreach( $list as $v ) {
            $realname = $sandbox . DIRECTORY_SEPARATOR . $v;
            $this->assertFileExists($realname);
        }
        foreach( $this->expected as $v ) {
            $realname = $sandbox . DIRECTORY_SEPARATOR . $v;
            $this->assertFileNotExists($realname);
        }
    }
    
    /**
     * Tests the 'next' and 'rewind' methods
     */
    public function testNextAndRewind()
    {
        $delegate = $this->object->getDelegate();
        $this->object->next();
        $filename = $this->object->current();
        $this->object->rewind();
        $this->object->next();
        $this->assertEquals($filename, $this->object->current());
    }
}

// Call Lunette_Package_Archive_TarTest::main() if this source file is executed directly.
if (PHPUnit_MAIN_METHOD == 'Lunette_Package_Archive_TarTest::main') {
    Lunette_Package_Archive_TarTest::main();
}
