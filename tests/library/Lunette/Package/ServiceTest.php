<?php
/**
 * Lunette Platform
 * 
 * Lunette is free software: you can redistribute it and/or modify it under the
 * terms of the GNU General Public License as published by the Free Software
 * Foundation, either version 3 of the License, or (at your option) any later
 * version.
 *
 * Lunette is distributed in the hope that it will be useful, but WITHOUT ANY
 * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR
 * A PARTICULAR PURPOSE. See the GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with Lunette. If not, see <http://www.gnu.org/licenses/>.
 * 
 * @copyright Copyright (c) SI Tec Consulting, LLC (http://www.sitec-consulting.net)
 * @license http://opensource.org/licenses/gpl-3.0.html GNU Public License
 * @category Lunette
 * @package Lunette_Package
 * @subpackage Tests
 * @version $Id$
 */
// Call Lunette_Package_ServiceTest::main() if this source file is executed directly.
if (!defined('PHPUnit_MAIN_METHOD')) {
    define('PHPUnit_MAIN_METHOD', 'Lunette_Package_ServiceTest::main');
}
require_once dirname(dirname(dirname(dirname(__FILE__)))) . DIRECTORY_SEPARATOR . 'TestHelper.php';
require_once 'Lunette/Package/Service.php';
require_once 'Lunette/Package/Cached.php';
require_once 'Lunette/TestDbSetup.php';

/**
 * Test class for Lunette_Package_Service.
 * Generated by PHPUnit on 2008-06-30 at 10:00:09.
 */
class Lunette_Package_ServiceTest extends PHPUnit_Framework_TestCase
{
    /**
     * @var    Lunette_Package_Service
     */
    protected $object;

    /**
     * Runs the test methods of this class.
     */
    public static function main()
    {
        require_once 'PHPUnit/TextUI/TestRunner.php';
        $suite  = new PHPUnit_Framework_TestSuite('Lunette_Package_ServiceTest');
        $result = PHPUnit_TextUI_TestRunner::run($suite);
    }

    /**
     * Sets up the fixture
     */
    protected function setUp()
    {
        $setup = new Lunette_TestDbSetup;
        $setup->setupPackage();
        
        $this->object = new Lunette_Package_Service(Xyster_Orm::getInstance());
    }

    /**
     * Tears down the fixture
     */
    protected function tearDown()
    {
        $setup = new Lunette_TestDbSetup;
        $setup->tearDownPackage();
    }

    /**
     * Tests the 'getByName' method
     */
    public function testGetByName()
    {
        $package = new LunettePackage;
        $package->name = 'foobar-package';
        $package->version = '2.0.2-lunette5';
        $package->state = 5;
        $orm = Xyster_Orm::getInstance();
        $orm->persist($package);
        $orm->commit();
        
        $pkg2 = $this->object->getByName('foobar-package');
        $this->assertEquals($package->name, $pkg2->name);        
    }

    /**
     * Tests the 'getInstalledVersion' method
     */
    public function testGetInstalledVersion()
    {
        $package = new LunettePackage;
        $package->name = 'foobar-package';
        $package->version = '2.0.2-lunette5';
        $package->state = 5;
        $orm = Xyster_Orm::getInstance();
        $orm->persist($package);
        $orm->commit();
        
        $version = $this->object->getInstalledVersion($package->name);
        $this->assertEquals($package->version, $version);

        $version = $this->object->getInstalledVersion('not there');
        $this->assertNull($version);
    }

    /**
     * Tests the 'getWithMatchingFiles' method
     */
    public function testGetWithMatchingFiles()
    {
        $orm = Xyster_Orm::getInstance();
        $package = new LunettePackage;
        $package->name = 'foobar-package';
        $package->version = '2.0.2-lunette5';
        $package->state = 5;
        $package->replaces = 'replaced-package';
        $package->files = "\ntmp/test1/test2.txt\ntmp/test3/test4.txt\n";
        $orm->persist($package);
        $package2 = new LunettePackage;
        $package2->name = 'test-package';
        $package2->version = '1.1.2';
        $package2->state = 1;
        $package2->files = "\ndocs/example.txt\n";
        $orm->persist($package2);
        $package3 = new LunettePackage;
        $package3->name = 'example-package';
        $package3->version = '3.0.1';
        $package3->state = 1;
        $package3->files = "\ntmp/test1/test2.txt\n";
        $orm->persist($package3);
        $package4 = new LunettePackage;
        $package4->name = 'replaced-package';
        $package4->version = '1.6.1';
        $package4->state = 1;
        $package4->files = "\ntmp/test1/test2.txt\n";
        $orm->persist($package4);
        $orm->commit();
        
        $set = $this->object->getWithMatchingFiles(new Lunette_Package_Cached($package));
        $this->assertEquals(1, count($set));
        $this->assertTrue($set->contains($package3));
        
        $set = $this->object->getWithMatchingFiles(new Lunette_Package_Cached($package), false);
        $this->assertEquals(2, count($set));
        $this->assertTrue($set->contains($package3));
        $this->assertTrue($set->contains($package4));
    }

    /**
     * @todo Implement testRelationsSatisfied().
     */
    public function testRelationsSatisfied()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }

    /**
     * Tests the 'setFiles' method
     */
    public function testSetFiles()
    {
        $orm = Xyster_Orm::getInstance();
        $package = new LunettePackage;
        $package->name = 'foobar-package';
        $package->version = '2.0.2-lunette5';
        $package->state = 5;
        $orm->persist($package);
        $orm->commit();
        
        $files = array('test/1.txt', 'test/2.txt', 'test/3.txt', 'test/4.txt');
        $pkg = new Lunette_Package_Cached($package);
        $this->object->setFiles($pkg, $files);
        $this->assertEquals($files, $pkg->getFiles());
    }

    /**
     * Tests the 'setScripts' method
     */
    public function testSetScripts()
    {
        $orm = Xyster_Orm::getInstance();
        $package = new LunettePackage;
        $package->name = 'foobar-package';
        $package->version = '2.0.2-lunette5';
        $package->state = 5;
        $orm->persist($package);
        $orm->commit();
        
        $scripts = array(
            'preinst' => '<?php phpinfo();',
            'postinst' => '<?php echo "Hello, world";',
            'prerm' => '<?php echo "Goodbye, world";',
            'postrm' => '<?php die("Error");'
        );
        require_once 'Lunette/File/Sandbox.php';
        $sandbox = new Lunette_File_Sandbox('LunettePackageServiceTest');
        foreach( $scripts as $key => $script ) {
            file_put_contents($sandbox->getRealpath() . $key . '.php', $script);
            $scripts[$key] = $sandbox->getRealpath() . $key . '.php';
        }
        $pkg = new Lunette_Package_Cached($package);
        $this->object->setScripts($pkg, $scripts);
        foreach( $scripts as $key => $script ) {
            $this->assertEquals(file_get_contents($script), $pkg->getScript($key));
        }
        $sandbox = null;
        
        $this->object->setScripts($pkg, array('preinst'=>null,'postinst'=>null,'prerm'=>null,'postrm'=>null));
        foreach( $scripts as $key => $script ) {
            $this->assertEquals(null, $pkg->getScript($key));
        }
    }

    /**
     * Tests the 'setState' method
     */
    public function testSetState()
    {
        $orm = Xyster_Orm::getInstance();
        $package = new LunettePackage;
        $package->name = 'foobar-package';
        $package->version = '2.0.2-lunette5';
        $package->state = 5;
        $orm->persist($package);
        $orm->commit();
        
        $pkg = new Lunette_Package_Cached($package);
        $this->object->setState($pkg, Lunette_Package_State::NotInstalled());
        $this->assertSame(Lunette_Package_State::NotInstalled(), $pkg->getState($this->object));
    }
}

// Call Lunette_Package_ServiceTest::main() if this source file is executed directly.
if (PHPUnit_MAIN_METHOD == 'Lunette_Package_ServiceTest::main') {
    Lunette_Package_ServiceTest::main();
}
