<?php
/**
 * Lunette Platform
 * 
 * Lunette is free software: you can redistribute it and/or modify it under the
 * terms of the GNU General Public License as published by the Free Software
 * Foundation, either version 3 of the License, or (at your option) any later
 * version.
 *
 * Lunette is distributed in the hope that it will be useful, but WITHOUT ANY
 * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR
 * A PARTICULAR PURPOSE. See the GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with Lunette. If not, see <http://www.gnu.org/licenses/>.
 * 
 * @copyright Copyright (c) SI Tec Consulting, LLC (http://www.sitec-consulting.net)
 * @license http://opensource.org/licenses/gpl-3.0.html GNU Public License
 * @category Lunette
 * @package Lunette_File
 * @subpackage Tests
 * @version $Id$
 */
// Call Lunette_User_ServiceTest::main() if this source file is executed directly.
if (!defined('PHPUnit_MAIN_METHOD')) {
    define('PHPUnit_MAIN_METHOD', 'Lunette_User_ServiceTest::main');
}
require_once dirname(dirname(dirname(dirname(__FILE__)))) . DIRECTORY_SEPARATOR . 'TestHelper.php';
require_once 'Lunette/User/Service.php';
require_once 'Lunette/TestDbSetup.php';

/**
 * Test class for Lunette_User_Service.
 * Generated by PHPUnit on 2008-06-30 at 15:52:20.
 */
class Lunette_User_ServiceTest extends PHPUnit_Framework_TestCase
{
    /**
     * @var    Lunette_User_Service
     */
    protected $object;

    /**
     * Runs the test methods of this class.
     */
    public static function main()
    {
        require_once 'PHPUnit/TextUI/TestRunner.php';
        $suite  = new PHPUnit_Framework_TestSuite('Lunette_User_ServiceTest');
        $result = PHPUnit_TextUI_TestRunner::run($suite);
    }

    /**
     * Sets up the fixture
     */
    protected function setUp()
    {
        $db = new Lunette_TestDbSetup();
        $db->setupUser();
        $this->object = new Lunette_User_Service(Xyster_Orm::getInstance());
    }

    /**
     * Tears down the fixture
     */
    protected function tearDown()
    {
        $db = new Lunette_TestDbSetup();
        $db->tearDownUser();
    }

    /**
     * Tests the 'authenticate' method
     */
    public function testAuthenticate()
    {
        $this->_setup();
        $this->assertEquals(-1, $this->object->authenticate('nobody', null));
        $this->assertEquals(-3, $this->object->authenticate('doublecompile@irrationallogic.net', null));
        $this->assertEquals(1, $this->object->authenticate('doublecompile@irrationallogic.net', 'foobar'));
    }

    /**
     * Tests the 'getByEmail' method
     */
    public function testGetByEmail()
    {
        $this->_setup();
        $user = $this->object->getByEmail('doublecompile@irrationallogic.net');
        $this->assertType('LunetteUser', $user);
        $this->assertEquals('doublecompile', $user->username);
    }

    /**
     * Tests the 'getByUsername' method
     */
    public function testGetByUsername()
    {
        $this->_setup();
        $user = $this->object->getByUsername('doublecompile');
        $this->assertType('LunetteUser', $user);
        $this->assertEquals('doublecompile@irrationallogic.net', $user->email);
    }
    
    /**
     * Tests the 'setPassword' method
     */
    public function testSetPassword()
    {
        $this->_setup();
        $user = $this->object->getByUsername('doublecompile');
        $this->object->setPassword($user, 'newpassword');
        $this->assertEquals(md5('newpassword'), $user->password);
    }
    
    /**
     * Sets up the user for common tests
     */
    protected function _setup()
    {
        $orm = Xyster_Orm::getInstance();
        $user = new LunetteUser;
        $user->username = 'doublecompile';
        $user->email = 'doublecompile@irrationallogic.net';
        $user->password = md5('foobar');
        $orm->persist($user);
        $orm->commit();
    }
}

// Call Lunette_User_ServiceTest::main() if this source file is executed directly.
if (PHPUnit_MAIN_METHOD == 'Lunette_User_ServiceTest::main') {
    Lunette_User_ServiceTest::main();
}
