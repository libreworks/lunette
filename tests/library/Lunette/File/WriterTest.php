<?php
/**
 * Lunette Platform
 * 
 * Lunette is free software: you can redistribute it and/or modify it under the
 * terms of the GNU General Public License as published by the Free Software
 * Foundation, either version 3 of the License, or (at your option) any later
 * version.
 *
 * Lunette is distributed in the hope that it will be useful, but WITHOUT ANY
 * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR
 * A PARTICULAR PURPOSE. See the GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with Lunette. If not, see <http://www.gnu.org/licenses/>.
 * 
 * @copyright Copyright (c) LibreWorks (http://libreworks.com)
 * @license http://opensource.org/licenses/gpl-3.0.html GNU Public License
 * @category Lunette
 * @package Lunette_File
 * @subpackage Tests
 * @version $Id$
 */
// Call Lunette_File_WriterTest::main() if this source file is executed directly.
if (!defined('PHPUnit_MAIN_METHOD')) {
    define('PHPUnit_MAIN_METHOD', 'Lunette_File_WriterTest::main');
}
require_once dirname(dirname(dirname(dirname(__FILE__)))) . DIRECTORY_SEPARATOR . 'TestHelper.php';
require_once 'Lunette/File/Writer.php';
require_once 'Lunette/File/Sandbox.php';

/**
 * Test class for Lunette_File_Writer.
 * Generated by PHPUnit on 2008-06-03 at 18:37:09.
 */
class Lunette_File_WriterTest extends PHPUnit_Framework_TestCase
{
    /**
     * @var Lunette_File_Writer
     */
    protected $object;
    
    /**
     * @var Lunette_File_Sandbox
     */
    protected $sandbox;
    
    /**
     * Runs the test methods of this class.
     */
    public static function main()
    {
        require_once 'PHPUnit/TextUI/TestRunner.php';
        $suite  = new PHPUnit_Framework_TestSuite('Lunette_File_WriterTest');
        $result = PHPUnit_TextUI_TestRunner::run($suite);
    }

    /**
     * Sets up the fixture
     */
    protected function setUp()
    {
        $this->sandbox = new Lunette_File_Sandbox('WriterTest');
        $this->object = new Lunette_File_Writer($this->sandbox->getRealpath());
    }

    /**
     * Tears down the fixture
     */
    protected function tearDown()
    {
        $this->sandbox = null;
    }

    /**
     * Tests the 'getBase' method
     */
    public function testGetBase()
    {
        $cwd = getcwd();
        $object = new Lunette_File_Writer();
        $this->assertEquals($cwd.'/', $object->getBase());
    }

    /**
     * Tests the 'getFilename' method
     */
    public function testGetFilename()
    {
        $filename = 'aoeuhtns.dvorak';
        $this->assertEquals($this->_getSandboxName() . '/' . $filename, $this->object->getFilename($filename));
    }

    /**
     * Tests the 'getWriteStream' method
     */
    public function testGetWriteStream()
    {
        $filename = $this->_getSandboxName() . '/test.txt';
        $stream = $this->object->getWriteStream($filename);
        $this->assertTrue(is_resource($stream));
    }
    
    /**
     * Tests the 'getWriteStream' method with a directory existing
     */
    public function testGetWriteStreamDirectory()
    {
        $directory = $this->_getSandboxName() . '/mydir';
        mkdir($directory);
        $this->setExpectedException('Lunette_File_Exception', 'File already exists as a directory: ' . $directory);
        $this->object->getWriteStream($directory);
    }
    
    /**
     * Tests the 'getWriteStream' method with a no access file
     */
    public function testGetWriteStreamInvalid()
    {
        $filename = $this->_getSandboxName() . '/mydir/anotherdir/test.txt';
        $this->setExpectedException('Lunette_File_Exception', 'Cannot write to file: ' . $filename);
        $this->object->getWriteStream($filename);
    }

    /**
     * Tests the 'mkdir' method
     */
    public function testMkdir()
    {
        $dirname = $this->_getSandboxName() . '/mytestdir';
        $this->assertFileNotExists($dirname);
        $this->object->mkdir('/mytestdir/');
        $this->assertFileExists($dirname);
    }

    /**
     * Tests the 'mkdir' method when the directory already exists as a file
     */
    public function testMkdirExists()
    {
        $dirname = $this->_getSandboxName() . '/mytestdir';
        file_put_contents($dirname, 'abc123');
        $this->setExpectedException('Lunette_File_Exception', 'Directory already exists as a file: ' . $dirname);
        $this->object->mkdir('/mytestdir');
    }
    
    /**
     * Tests the 'write' method
     */
    public function testWrite()
    {
        $data = file_get_contents(dirname(__FILE__) . '/_files/alicecp1.txt');
        $filename = 'dir1/dir2/alice.txt';
        $stat = array('mtime' => strtotime('-1 month'), 'mode' => 0755, 'size' => strlen($data));
        $realname = $this->_getSandboxName() . '/' . $filename;
        $this->assertFileNotExists($realname);
        $this->object->write($data, $filename, $stat);
        $this->assertFileExists($realname);
        $this->assertEquals(strlen($data), filesize($realname));
        $this->assertEquals('0755', substr(sprintf('%o', fileperms($realname)), -4));
        $this->assertEquals($stat['mtime'], filemtime($realname));
    }
    
    /**
     * Tests the 'write' method with the wrong filesize in the stat array
     */
    public function testWriteWrongSize()
    {
        $data = file_get_contents(dirname(__FILE__) . '/_files/alicecp1.txt');
        $filename = 'alice.txt';
        $stat = array('mtime' => strtotime('-1 month'), 'mode' => 0755, 'size' => strlen($data)-1);
        $realname = $this->_getSandboxName() . '/' . $filename;
        $this->setExpectedException('Lunette_File_Exception');
        $this->object->write($data, $filename, $stat);
    }
    
    /**
     * Gets the sandbox name
     *
     * @return string
     */
    protected function _getSandboxName()
    {
        return $this->sandbox->getRealpath();
    }
}

// Call Lunette_File_WriterTest::main() if this source file is executed directly.
if (PHPUnit_MAIN_METHOD == 'Lunette_File_WriterTest::main') {
    Lunette_File_WriterTest::main();
}
